###############################################################################################################################
###############################################################################################################################

What: Dump of all built-in commands.
From: Lobster Git
When: 2023-05-14

###############################################################################################################################
###############################################################################################################################


NFR
    audio.cpp:25:               nfr("play_wav", "filename,loops,prio", "SI?I?", "I",
    audio.cpp:37:               nfr("load_wav", "filename", "S", "B",
    audio.cpp:45:               nfr("play_sfxr", "filename,loops,prio", "SI?I?", "I",
    audio.cpp:57:               nfr("load_sfxr", "filename", "S", "B",
    audio.cpp:65:               nfr("play_ogg", "filename,loops,prio", "SI?I?", "I",
    audio.cpp:76:               nfr("load_ogg", "filename", "S", "B",
    audio.cpp:84:               nfr("sound_status", "channel", "I", "I",
    audio.cpp:96:               nfr("sound_halt", "channel", "I", "",
    audio.cpp:105:              nfr("sound_pause", "channel", "I", "",
    audio.cpp:114:              nfr("sound_resume", "channel", "I", "",
    audio.cpp:123:              nfr("sound_volume", "channel,volume", "IF", "",
    audio.cpp:132:              nfr("sound_position", "channel,vecfromlistener,listenerfwd,attnscale", "IF}:3F}:3F", "",
    audio.cpp:144:              nfr("text_to_speech", "text", "S", "",

    builtins.cpp:70:            nfr("print", "x", "Ss", "",
    builtins.cpp:80:            nfr("string", "x", "Ssk", "S",
    builtins.cpp:86:            nfr("set_print_depth", "depth", "I", "I",
    builtins.cpp:95:            nfr("set_print_length", "len", "I", "I",
    builtins.cpp:104:           nfr("set_print_quoted", "quoted", "B", "B",
    builtins.cpp:113:           nfr("set_print_decimals", "decimals", "I", "I",
    builtins.cpp:122:           nfr("set_print_indent", "spaces", "I", "I",
    builtins.cpp:131:           nfr("get_line", "prefix", "S", "S",
    builtins.cpp:144:           nfr("append", "xs,ys", "A]*cA]*u1c", "A]1",
    builtins.cpp:154:           nfr("append_into", "dest,src", "A]*A]1c", "Ab]1",
    builtins.cpp:161:           nfr("vector_capacity", "xs,len", "A]*I", "Ab]1",
    builtins.cpp:171:           nfr("length", "x", "I", "I",
    builtins.cpp:177:           nfr("length", "s", "S", "I",
    builtins.cpp:184:           nfr("length", "xs", "A]*", "I",
    builtins.cpp:191:           nfr("equal", "a,b", "AA", "B",
    builtins.cpp:199:           nfr("push", "xs,x", "A]*Akw1", "Ab]1",
    builtins.cpp:209:           nfr("pop", "xs", "A]*", "A1",
    builtins.cpp:218:           nfr("top", "xs", "A]*", "Ab1",
    builtins.cpp:227:           nfr("insert", "xs,i,x", "A]*IAkw1", "Ab]1",
    builtins.cpp:241:           nfr("remove", "xs,i", "A]*I", "A1",
    builtins.cpp:251:           nfr("remove_range", "xs,i,n", "A]*II", "",
    builtins.cpp:263:           nfr("remove_obj", "xs,obj", "A]*A1", "Ab2",
    builtins.cpp:278:           nfr("binary_search", "xs,key", "I]I", "II",
    builtins.cpp:288:           nfr("binary_search", "xs,key", "F]F", "II",
    builtins.cpp:295:           nfr("binary_search", "xs,key", "S]S", "II",
    builtins.cpp:302:           nfr("binary_search_object", "xs,key", "A]*A1", "II",
    builtins.cpp:309:           nfr("copy", "x", "A", "A1",
    builtins.cpp:315:           nfr("deepcopy", "x,depth", "AI", "A1",
    builtins.cpp:322:           nfr("slice", "xs,start,size", "A]*II", "A]1",
    builtins.cpp:336:           nfr("any", "xs", "A]*", "B",
    builtins.cpp:347:           nfr("any", "xs", "I}", "B",
    builtins.cpp:358:           nfr("all", "xs", "A]*", "B",
    builtins.cpp:368:           nfr("all", "xs", "I}", "B",
    builtins.cpp:379:           nfr("substring", "s,start,size", "SII", "S",
    builtins.cpp:393:           nfr("find_string", "s,substr,offset", "SSI?", "I",
    builtins.cpp:400:           nfr("find_string_reverse", "s,substr,offset", "SSI?", "I",
    builtins.cpp:409:           nfr("replace_string", "s,a,b,count", "SSSI?", "S",
    builtins.cpp:441:           nfr("string_to_int", "s,base", "SI?", "IB",
    builtins.cpp:456:           nfr("string_to_float", "s", "S", "FB",
    builtins.cpp:467:           nfr("tokenize", "s,delimiters,whitespace,dividing", "SSSI?", "S]",
    builtins.cpp:492:           nfr("unicode_to_string", "us", "I]", "S",
    builtins.cpp:505:           nfr("string_to_unicode", "s", "S", "I]B",
    builtins.cpp:521:           nfr("number_to_string", "number,base,minchars", "III", "S",
    builtins.cpp:537:           nfr("lowercase", "s", "S", "S",
    builtins.cpp:548:           nfr("uppercase", "s", "S", "S",
    builtins.cpp:559:           nfr("escape_string", "s,set,prefix,postfix", "SSSS", "S",
    builtins.cpp:581:           nfr("concat_string", "v,sep", "S]S", "S",
    builtins.cpp:594:           nfr("repeat_string", "s,n", "SI", "S",
    builtins.cpp:619:           nfr("pow", "a,b", "II", "I",
    builtins.cpp:625:           nfr("pow", "a,b", "FF", "F",
    builtins.cpp:629:           nfr("pow", "a,b", "F}F", "F}",
    builtins.cpp:636:           nfr("log", "a", "F", "F",
    builtins.cpp:640:           nfr("log2", "a", "F", "F",
    builtins.cpp:644:           nfr("sqrt", "f", "F", "F",
    builtins.cpp:648:           nfr("ceiling", "f", "F", "I",
    builtins.cpp:651:           nfr("ceiling", "v", "F}", "I}",
    builtins.cpp:655:           nfr("floor", "f", "F", "I",
    builtins.cpp:658:           nfr("floor", "v", "F}", "I}",
    builtins.cpp:662:           nfr("int", "f", "F", "I",
    builtins.cpp:665:           nfr("int", "v", "F}", "I}",
    builtins.cpp:669:           nfr("round", "f", "F", "I",
    builtins.cpp:672:           nfr("round", "v", "F}", "I}",
    builtins.cpp:676:           nfr("fraction", "f", "F", "F",
    builtins.cpp:679:           nfr("fraction", "v", "F}", "F}",
    builtins.cpp:683:           nfr("float", "i", "I", "F",
    builtins.cpp:686:           nfr("float", "v", "I}", "F}",
    builtins.cpp:690:           nfr("sin", "angle", "F", "F",
    builtins.cpp:693:           nfr("cos", "angle", "F", "F",
    builtins.cpp:696:           nfr("tan", "angle", "F", "F",
    builtins.cpp:700:           nfr("sincos", "angle", "F", "F}:2",
    builtins.cpp:707:           nfr("asin", "y", "F", "F",
    builtins.cpp:710:           nfr("acos", "x", "F", "F",
    builtins.cpp:713:           nfr("atan", "x", "F", "F",
    builtins.cpp:717:           nfr("radians", "angle", "F", "F",
    builtins.cpp:720:           nfr("degrees", "angle", "F", "F",
    builtins.cpp:724:           nfr("atan2", "vec", "F}:2" , "F",
    builtins.cpp:731:           nfr("radians", "angle", "F", "F",
    builtins.cpp:734:           nfr("degrees", "angle", "F", "F",
    builtins.cpp:738:           nfr("normalize", "vec",  "F}" , "F}",
    builtins.cpp:752:           nfr("dot", "a,b", "F}F}1", "F",
    builtins.cpp:760:           nfr("magnitude", "v", "F}", "F",
    builtins.cpp:767:           nfr("magnitude_squared", "v", "F}", "F",
    builtins.cpp:774:           nfr("magnitude_squared", "v", "I}", "I",
    builtins.cpp:781:           nfr("manhattan", "v", "I}", "I",
    builtins.cpp:788:           nfr("cross", "a,b", "F}:3F}:3", "F}:3",
    builtins.cpp:796:           nfr("volume", "v", "F}", "F", "the volume of the area spanned by the vector",
    builtins.cpp:802:           nfr("volume", "v", "I}", "I", "the volume of the area spanned by the vector",
    builtins.cpp:808:           nfr("rnd", "max", "I", "I",
    builtins.cpp:811:           nfr("rnd", "max", "I}", "I}",
    builtins.cpp:814:           nfr("rnd_float", "", "", "F",
    builtins.cpp:817:           nfr("rnd_gaussian", "", "", "F",
    builtins.cpp:820:           nfr("rnd_seed", "seed", "I", "",
    builtins.cpp:825:           nfr("rndm", "max", "I", "I",
    builtins.cpp:828:           nfr("rndm_seed", "seed", "I", "",
    builtins.cpp:832:           nfr("div", "a,b", "II", "F",
    builtins.cpp:836:           nfr("clamp", "x,min,max", "III", "I",
    builtins.cpp:842:           nfr("clamp", "x,min,max", "FFF", "F",
    builtins.cpp:848:           nfr("clamp", "x,min,max", "I}I}1I}1", "I}",
    builtins.cpp:857:           nfr("clamp", "x,min,max", "F}F}1F}1", "F}",
    builtins.cpp:866:           nfr("in_range", "x,range,bias", "III?", "B",
    builtins.cpp:872:           nfr("in_range", "x,range,bias", "FFF?", "B",
    builtins.cpp:878:           nfr("in_range", "x,range,bias", "I}:2I}:2I}:2?", "B",
    builtins.cpp:886:           nfr("in_range", "x,range,bias", "I}:3I}:3I}:3?", "B",
    builtins.cpp:895:           nfr("in_range", "x,range,bias", "F}:2F}:2F}:2?", "B",
    builtins.cpp:903:           nfr("in_range", "x,range,bias", "F}:3F}:3F}:3?", "B",
    builtins.cpp:913:           nfr("abs", "x", "I", "I",
    builtins.cpp:916:           nfr("abs", "x", "F", "F",
    builtins.cpp:919:           nfr("abs", "x", "I}", "I}",
    builtins.cpp:922:           nfr("abs", "x", "F}", "F}",
    builtins.cpp:926:           nfr("sign", "x", "I", "I",
    builtins.cpp:929:           nfr("sign", "x", "F", "I",
    builtins.cpp:932:           nfr("sign", "x", "I}", "I}",
    builtins.cpp:935:           nfr("sign", "x", "F}", "I}",
    builtins.cpp:957:           nfr("min", "x,y", "II", "I",
    builtins.cpp:962:           nfr("min", "x,y", "FF", "F",
    builtins.cpp:967:           nfr("min", "x,y", "I}I}1", "I}",
    builtins.cpp:974:           nfr("min", "x,y", "F}F}1", "F}",
    builtins.cpp:981:           nfr("min", "v", "I}", "I",
    builtins.cpp:986:           nfr("min", "v", "F}", "F",
    builtins.cpp:991:           nfr("min", "v", "I]", "I",
    builtins.cpp:996:           nfr("min", "v", "F]", "F",
    builtins.cpp:1002:          nfr("max", "x,y", "II", "I",
    builtins.cpp:1007:          nfr("max", "x,y", "FF", "F",
    builtins.cpp:1012:          nfr("max", "x,y", "I}I}1", "I}",
    builtins.cpp:1019:          nfr("max", "x,y", "F}F}1", "F}",
    builtins.cpp:1026:          nfr("max", "v", "I}", "I",
    builtins.cpp:1031:          nfr("max", "v", "F}", "F",
    builtins.cpp:1036:          nfr("max", "v", "I]", "I",
    builtins.cpp:1041:          nfr("max", "v", "F]", "F",
    builtins.cpp:1047:          nfr("lerp", "x,y,f", "FFF", "F",
    builtins.cpp:1053:          nfr("lerp", "a,b,f", "F}F}1F", "F}",
    builtins.cpp:1062:          nfr("smoothmin", "x,y,k", "FFF", "F",
    builtins.cpp:1068:          nfr("smoothstep", "x", "F", "F",
    builtins.cpp:1074:          nfr("smootherstep", "x", "F", "F",
    builtins.cpp:1080:          nfr("cardinal_spline", "z,a,b,c,f,tension", "F}F}1F}1F}1FF", "F}",
    builtins.cpp:1094:          nfr("line_intersect", "line1a,line1b,line2a,line2b", "F}:2F}:2F}:2F}:2", "IF}:2",
    builtins.cpp:1108:          nfr("circles_within_range", "dist,positions,radiuses,positions2,radiuses2,gridsize", "FF}:2]F]F}:2]F]I}:2", "I]]",
    builtins.cpp:1192:          nfr("wave_function_collapse", "tilemap,size", "S]I}:2", "S]I",
    builtins.cpp:1222:          nfr("hash", "x", "I", "I",
    builtins.cpp:1228:          nfr("hash", "x", "A", "I",
    builtins.cpp:1234:          nfr("hash", "x", "L", "I",
    builtins.cpp:1240:          nfr("hash", "x", "F", "I",
    builtins.cpp:1246:          nfr("hash", "v", "I}", "I",
    builtins.cpp:1252:          nfr("hash", "v", "F}", "I",
    builtins.cpp:1259:          nfr("call_function_value", "x", "L", "",
    builtins.cpp:1267:          nfr("type_string", "ref", "A", "S",
    builtins.cpp:1274:          nfr("type_element_string", "v", "A]*", "S",
    builtins.cpp:1284:          nfr("type_field_count", "obj", "A", "I",
    builtins.cpp:1292:          nfr("type_field_string", "obj,idx", "AI", "S",
    builtins.cpp:1305:          nfr("type_field_name", "obj,idx", "AI", "S",
    builtins.cpp:1318:          nfr("type_field_value", "obj,idx", "AI", "S",
    builtins.cpp:1334:          nfr("program_name", "", "", "S",
    builtins.cpp:1340:          nfr("vm_compiled_mode", "", "", "B",
    builtins.cpp:1346:          nfr("seconds_elapsed", "", "", "F",
    builtins.cpp:1353:          nfr("date_time", "utc", "B?", "I]",
    builtins.cpp:1376:          nfr("date_time_string", "utc", "B?", "S",
    builtins.cpp:1389:          nfr("date_time_string_format", "format,utc", "SB?", "S",
    builtins.cpp:1406:          nfr("assert", "condition", "A*", "Ab1",
    builtins.cpp:1414:          nfr("get_stack_trace", "", "", "S",
    builtins.cpp:1423:          nfr("get_memory_usage", "n", "I", "S",
    builtins.cpp:1429:          nfr("pass", "", "", "",
    builtins.cpp:1435:          nfr("trace_bytecode", "mode", "I", "",
    builtins.cpp:1443:          nfr("reference_count", "val", "A", "I",
    builtins.cpp:1450:          nfr("set_console", "on", "B", "",
    builtins.cpp:1457:          nfr("set_output_level", "level", "I", "",
    builtins.cpp:1464:          nfr("set_exit_code", "code", "I", "",
    builtins.cpp:1471:          nfr("command_line_arguments", "", "", "S]",
    builtins.cpp:1477:          nfr("thread_information", "", "", "II",
    builtins.cpp:1484:          nfr("is_worker_thread", "", "", "B",
    builtins.cpp:1490:          nfr("start_worker_threads", "numthreads", "I", "",
    builtins.cpp:1497:          nfr("stop_worker_threads", "", "", "",
    builtins.cpp:1506:          nfr("workers_alive", "", "", "B",
    builtins.cpp:1513:          nfr("thread_write", "struct", "A", "",
    builtins.cpp:1520:          nfr("thread_read", "type", "T", "A1?",
    builtins.cpp:1532:          nfr("matrix_multiply", "a,b", "F]F]", "F]",
    builtins.cpp:1548:          nfr("matrix_rotate_x", "angle", "F}:2", "F]",
    builtins.cpp:1559:          nfr("matrix_rotate_y", "angle", "F}:2", "F]",
    builtins.cpp:1570:          nfr("matrix_rotate_z", "angle", "F}:2", "F]",
    builtins.cpp:1581:          nfr("matrix_translation", "trans", "F}:3", "F]",

    compiler.cpp:465:           nfr("compile_run_code", "code,args", "SS]", "SS?",
    compiler.cpp:475:           nfr("compile_run_file", "filename,args", "SS]", "SS?",

    cubegen.cpp:258:            nfr("cg_init", "size", "I}:3", "R:voxels",
    cubegen.cpp:266:            nfr("cg_size", "block", "R:voxels", "I}:3",
    cubegen.cpp:272:            nfr("cg_name", "block", "R:voxels", "S",
    cubegen.cpp:278:            nfr("cg_offset", "block", "R:voxels", "I}:3",
    cubegen.cpp:284:            nfr("cg_set", "block,pos,size,paletteindex", "R:voxelsI}:3I}:3I", "",
    cubegen.cpp:295:            nfr("cg_get", "block,pos", "R:voxelsI}:3", "I",
    cubegen.cpp:304:            nfr("cg_copy", "block,pos,size,dest,flip", "R:voxelsI}:3I}:3I}:3I}:3", "",
    cubegen.cpp:317:            nfr("cg_clone", "block,pos,size", "R:voxelsI}:3I}:3", "R:voxels",
    cubegen.cpp:330:            nfr("cg_color_to_palette", "block,color", "R:voxelsF}:4", "I",
    cubegen.cpp:339:            nfr("cg_palette_to_color", "block,paletteindex", "R:voxelsI", "F}:4",
    cubegen.cpp:347:            nfr("cg_copy_palette", "fromworld,toworld", "R:voxelsR:voxels", "", "",
    cubegen.cpp:355:            nfr("cg_sample_down", "scale,world", "IR:voxels", "", "",
    cubegen.cpp:385:            nfr("cg_scale_up", "scale,world", "IR:voxels", "R:voxels", "",
    cubegen.cpp:411:            nfr("cg_stretch", "newsize,world", "I}:3R:voxels", "R:voxels", "",
    cubegen.cpp:437:            nfr("cg_create_mesh", "block", "R:voxels", "R:mesh",
    cubegen.cpp:526:            nfr("cg_create_3d_texture", "block,textureformat,monochrome", "R:voxelsII?", "R:texture",
    cubegen.cpp:580:            nfr("cg_load_vox", "name,material_palette", "SI?", "R:voxels]S?",
    cubegen.cpp:933:            nfr("cg_save_vox", "block,name", "R:voxelsS", "B",
    cubegen.cpp:983:            nfr("cg_chunks_skipped", "block", "R:voxels", "B", "",
    cubegen.cpp:989:            nfr("cg_get_buf", "block", "R:voxels", "S",
    cubegen.cpp:998:            nfr("cg_average_surface_color", "world", "R:voxels", "F}:3II", "",
    cubegen.cpp:1041:           nfr("cg_average_face_colors", "world", "R:voxels", "F]",
    cubegen.cpp:1091:           nfr("cg_num_solid", "world", "R:voxels", "I", "",
    cubegen.cpp:1107:           nfr("cg_rotate", "block,n", "R:voxelsI", "R:voxels",
    cubegen.cpp:1139:           nfr("cg_simplex", "block,pos,size,spos,ssize,octaves,scale,persistence,solidcol,zscale,zbias", "R:voxelsI}:3I}:3F}:3F}:3IFFIFF", "",
    cubegen.cpp:1161:           nfr("cg_bounding_box", "world,minsolids", "R:voxelsF", "I}:3I}:3",
    cubegen.cpp:1206:           nfr("cg_randomize", "world,rnd_range,cutoff,paletteindex,filter", "R:voxelsIIII", "", "",
    cubegen.cpp:1222:           nfr("cg_erode", "world,minsolid,maxsolid", "R:voxelsII", "R:voxels", "",
    cubegen.cpp:1257:           nfr("cg_normal_indices", "block,radius", "R:voxelsI", "R:voxels",
    cubegen.cpp:1328:           nfr("cg_load_image", "name,depth,edge,numtiles", "SIII}:2", "R:voxels]",
    cubegen.cpp:1380:           nfr("cg_palette_storage_index", "block", "R:voxels", "I", "",
    cubegen.cpp:1386:           nfr("cg_get_palette_storage_len", "", "", "I", "",
    cubegen.cpp:1391:           nfr("cg_get_palette_storage_buf", "", "", "S", "",

    file.cpp:135:               nfr("scan_folder", "folder,rel", "SB?", "S]?I]?",
    file.cpp:159:               nfr("read_file", "file,textmode", "SI?", "S?",
    file.cpp:170:               nfr("write_file", "file,contents,textmode,absolute_path", "SSI?I?", "B",
    file.cpp:177:               nfr("rename_file", "old_file,new_file", "SS", "B",
    file.cpp:184:               nfr("launch_subprocess", "commandline,stdin", "S]S?", "IS",
    file.cpp:201:               nfr("vector_to_buffer", "vec,width", "A]*I?:4", "S",
    file.cpp:243:               nfr("ensure_size", "string,size,char,extra", "SkIII?", "S",
    file.cpp:264:               nfr(#N, "string,i,val", "SkI" S, "SI", D, \
    file.cpp:281:               nfr("write_substring", "string,i,substr,nullterm", "SkISI", "SI",
    file.cpp:287:               nfr("write_substring_back", "string,i,substr,nullterm", "SkISI", "SI",
    file.cpp:293:               nfr("compare_substring", "string_a,i_a,string_b,i_b,len", "SISII", "I",
    file.cpp:315:               nfr(#N, "string,i", "SI", S "I", D, \
    file.cpp:344:               nfr(#N, "string,tablei,vo,def", "SII" S, S, D, \
    file.cpp:360:               nfr("flatbuffers_field_string", "string,tablei,vo", "SII", "S",
    file.cpp:369:               nfr("flatbuffers_field_vector_len", "string,tablei,vo", "SII", "I",
    file.cpp:378:               nfr("flatbuffers_field_vector", "string,tablei,vo", "SII", "I",
    file.cpp:387:               nfr("flatbuffers_field_table", "string,tablei,vo", "SII", "I",
    file.cpp:395:               nfr("flatbuffers_field_struct", "string,tablei,vo", "SII", "I",
    file.cpp:403:               nfr("flatbuffers_field_present", "string,tablei,vo", "SII", "B",
    file.cpp:409:               nfr("flatbuffers_indirect", "string,index", "SI", "I",
    file.cpp:416:               nfr("flatbuffers_string", "string,index", "SI", "S",
    file.cpp:424:               nfr("flatbuffers_binary_to_json", "schemas,binary,includedirs", "SSS]", "SS?",
    file.cpp:439:               nfr("flatbuffers_json_to_binary", "schema,json,includedirs", "SSS]", "SS?",

    font.cpp:61:                nfr("gl_set_font_name", "filename", "S", "B",
    font.cpp:85:                nfr("gl_set_font_size", "size,outlinesize", "IF?", "B",
    font.cpp:114:               nfr("gl_set_max_font_size", "size", "I", "",
    font.cpp:122:               nfr("gl_get_font_size", "", "", "I",
    font.cpp:126:               nfr("gl_get_outline_size", "", "", "F",
    font.cpp:130:               nfr("gl_text", "text", "S", "Sb",
    font.cpp:149:               nfr("gl_text_size", "text", "S", "I}:2",
    font.cpp:161:               nfr("gl_get_glyph_name", "i", "I", "S",
    font.cpp:167:               nfr("gl_get_char_code", "name", "S", "I",

    glvr.cpp:289:               nfr("vr_init", "", "", "B",
    glvr.cpp:295:               nfr("vr_start_eye", "isright,znear,zfar", "IFF", "",
    glvr.cpp:303:               nfr("vr_start", "", "", "",
    glvr.cpp:310:               nfr("vr_finish", "", "", "",
    glvr.cpp:317:               nfr("vr_set_eye_texture", "unit,isright", "II", "",
    glvr.cpp:326:               nfr("vr_num_motion_controllers", "", "", "I",
    glvr.cpp:332:               nfr("vr_motioncontrollerstracking", "n", "I", "B",
    glvr.cpp:339:               nfr("vr_motion_controller", "n", "I", "",
    glvr.cpp:349:               nfr("vr_create_motion_controller_mesh", "n", "I", "R:mesh?",
    glvr.cpp:359:               nfr("vr_motion_controller_button", "n,button", "IS", "I",
    glvr.cpp:376:               nfr("vr_motion_controller_vec", "n,i", "II", "F}:3",
    glvr.cpp:387:               nfr("vr_hmd_vec", "i", "I", "F]:3",

    graphics.cpp:176:           nfr("gl_window", "title,xs,ys,flags,samples", "SIII?I?:1", "S?",
    graphics.cpp:198:           nfr("gl_require_version", "major,minor", "II", "",
    graphics.cpp:206:           nfr("gl_load_materials", "materialdefs,inline", "SI?", "S?",
    graphics.cpp:218:           nfr("gl_scissor", "top_left,size", "I}:2I}:2", "I}:2I}:2",
    graphics.cpp:232:           nfr("gl_frame", "", "", "B",
    graphics.cpp:240:           nfr("gl_shutdown", "", "", "",
    graphics.cpp:248:           nfr("gl_window_title", "title", "S", "Sb",
    graphics.cpp:256:           nfr("gl_window_min_max", "dir", "I", "",
    graphics.cpp:264:           nfr("gl_visible", "", "", "B",
    graphics.cpp:271:           nfr("gl_cursor", "on", "B", "B",
    graphics.cpp:279:           nfr("gl_grab", "on", "B", "B",
    graphics.cpp:286:           nfr("gl_button", "name", "S", "II",
    graphics.cpp:300:           nfr("gl_key_repeat", "name", "S", "B",
    graphics.cpp:307:           nfr("gl_start_text_input", "pos,size", "I}:2I}:2", "",
    graphics.cpp:317:           nfr("gl_text_input_state", "", "", "SSII",
    graphics.cpp:328:           nfr("gl_set_text_input", "text", "S", "",
    graphics.cpp:335:           nfr("gl_end_text_input", "", "", "",
    graphics.cpp:342:           nfr("gl_touchscreen", "", "", "B",
    graphics.cpp:352:           nfr("gl_dpi", "screen", "I", "I",
    graphics.cpp:359:           nfr("gl_window_size", "", "", "I}:2",
    graphics.cpp:365:           nfr("gl_mouse_pos", "i", "I", "I}:2",
    graphics.cpp:372:           nfr("gl_mouse_delta", "i", "I", "I}:2",
    graphics.cpp:380:           nfr("gl_local_mouse_pos", "i", "I", "F}:2",
    graphics.cpp:387:           nfr("gl_last_pos", "name,down", "SI", "I}:2",
    graphics.cpp:396:           nfr("gl_local_last_pos", "name,down", "SI", "F}:2",
    graphics.cpp:406:           nfr("gl_mousewheel_delta", "", "", "I",
    graphics.cpp:412:           nfr("gl_joy_axis", "i", "I", "F",
    graphics.cpp:418:           nfr("gl_delta_time", "", "", "F",
    graphics.cpp:424:           nfr("gl_time", "", "", "F",
    graphics.cpp:431:           nfr("gl_last_time", "name,down", "SI", "F",
    graphics.cpp:438:           nfr("gl_clear", "col", "F}:4", "",
    graphics.cpp:445:           nfr("gl_color", "col", "F}:4", "F}:4",
    graphics.cpp:453:           nfr("gl_polygon", "vertlist", "F}]", "",
    graphics.cpp:463:           nfr("gl_rounded_rectangle", "size,segments,corner_ratio", "F}:2IF", "",
    graphics.cpp:473:           nfr("gl_circle", "radius,segments", "FI", "",
    graphics.cpp:481:           nfr("gl_open_circle", "radius,segments,thickness", "FIF", "",
    graphics.cpp:493:           nfr("gl_unit_cube", "insideout", "I?", "",
    graphics.cpp:501:           nfr("gl_rotate_x", "vec", "F}:2", "",
    graphics.cpp:508:           nfr("gl_rotate_y", "angle", "F}:2", "",
    graphics.cpp:515:           nfr("gl_rotate_z", "angle", "F}:2", "",
    graphics.cpp:523:           nfr("gl_translate", "vec", "F}", "",
    graphics.cpp:530:           nfr("gl_scale", "factor", "F", "",
    graphics.cpp:538:           nfr("gl_scale", "factor", "F}", "",
    graphics.cpp:545:           nfr("gl_origin", "", "", "F}:2",
    graphics.cpp:553:           nfr("gl_scaling", "", "", "F}:2",
    graphics.cpp:561:           nfr("gl_model_view_projection", "", "", "F]",
    graphics.cpp:571:           nfr("gl_model_view", "", "", "F]",
    graphics.cpp:581:           nfr("gl_projection", "", "", "F]",
    graphics.cpp:591:           nfr("gl_push_model_view", "", "", "",
    graphics.cpp:597:           nfr("gl_pop_model_view", "", "", "B",
    graphics.cpp:603:           nfr("gl_point_scale", "factor", "F", "",
    graphics.cpp:612:           nfr("gl_line_mode", "on", "I", "I",
    graphics.cpp:621:           nfr("gl_cull_front", "on", "B", "B",
    graphics.cpp:630:           nfr("gl_hit", "vec,i", "F}I", "B",
    graphics.cpp:659:           nfr("gl_rect", "size,centered", "F}:2I?", "",
    graphics.cpp:670:           nfr("gl_rect_tc_col", "size,tc,tcsize,cols", "F}:2F}:2F}:2F}:4]", "",
    graphics.cpp:693:           nfr("gl_unit_square", "centered", "I?", "",
    graphics.cpp:701:           nfr("gl_line", "start,end,thickness", "F}F}1F", "",
    graphics.cpp:712:           nfr("gl_perspective", "fovy,znear,zfar,frame_buffer_size,frame_buffer_offset,nodepth", "FFFI}:2?I}:2?I?", "",
    graphics.cpp:728:           nfr("gl_ortho", "rh,depth", "I?I?", "",
    graphics.cpp:739:           nfr("gl_ortho3d", "center,extends", "F}:3F}:3", "",
    graphics.cpp:747:           nfr("gl_new_poly", "positions", "F}]", "R:mesh",
    graphics.cpp:757:           nfr("gl_new_mesh", "format,positions,colors,normals,texcoords1,texcoords2,indices", "SF}:3]F}:4]F}:3]F}:2]F}:2]I]?", "R:mesh",
    graphics.cpp:839:           nfr("gl_new_mesh_iqm", "filename", "S", "R:mesh?",
    graphics.cpp:847:           nfr("gl_mesh_parts", "m", "R:mesh", "S]",
    graphics.cpp:856:           nfr("gl_mesh_size", "m", "R:mesh", "I",
    graphics.cpp:863:           nfr("gl_animate_mesh", "m,frame", "R:meshF", "",
    graphics.cpp:870:           nfr("gl_render_mesh", "m", "R:mesh", "",
    graphics.cpp:878:           nfr("gl_save_mesh", "m,name", "R:meshS", "B",
    graphics.cpp:887:           nfr("gl_mesh_pointsize", "m,pointsize", "R:meshF", "",
    graphics.cpp:897:           nfr("gl_set_shader", "shader", "S", "",
    graphics.cpp:908:           nfr("gl_set_shader", "shader", "R:shader", "",
    graphics.cpp:916:           nfr("gl_get_shader", "shader", "S", "R:shader",
    graphics.cpp:925:           nfr("gl_set_uniform", "name,value", "SF}", "B",
    graphics.cpp:936:           nfr("gl_set_uniform", "name,value", "SF", "B",
    graphics.cpp:944:           nfr("gl_set_uniform", "name,value", "SI}", "B",
    graphics.cpp:955:           nfr("gl_set_uniform", "name,value", "SI", "B",
    graphics.cpp:963:           nfr("gl_set_uniform_array", "name,value", "SF}:4]", "B",
    graphics.cpp:977:           nfr("gl_set_uniform_matrix", "name,value,morerows", "SF]B?", "B",
    graphics.cpp:991:           nfr("gl_update_buffer_object", "value,ssbo,offset,existing,dyn", "SIIRk:bufferobject?B", "R:bufferobject",
    graphics.cpp:1002:          nfr("gl_bind_buffer_object", "name,bo", "SR:bufferobject", "I",
    graphics.cpp:1012:          nfr("gl_copy_buffer_object", "source,destination,srcoffset,dstoffset,length", "R:bufferobject?R:bufferobject?III", "",
    graphics.cpp:1023:          nfr("gl_bind_mesh_to_compute", "mesh,name", "R:mesh?S", "",
    graphics.cpp:1032:          nfr("gl_dispatch_compute", "groups", "I}:3", "",
    graphics.cpp:1041:          nfr("gl_dump_shader", "filename,stripnonascii", "SB", "B",
    graphics.cpp:1052:          nfr("gl_blend", "on", "I", "I",
    graphics.cpp:1061:          nfr("gl_load_texture", "name,textureformat", "SI?", "R:texture?",
    graphics.cpp:1073:          nfr("gl_set_primitive_texture", "i,tex", "IR:texture", "",
    graphics.cpp:1081:          nfr("gl_set_mesh_texture", "mesh,part,i,texture", "R:meshIIR:texture", "",
    graphics.cpp:1091:          nfr("gl_set_image_texture", "i,tex,level,accessflags", "IR:textureII?", "",
    graphics.cpp:1100:          nfr("gl_create_texture", "matrix,textureformat", "F}:4]]I?", "R:texture",
    graphics.cpp:1125:          nfr("gl_create_blank_texture", "size,textureformat", "I}:3I?", "R:texture",
    graphics.cpp:1136:          nfr("gl_create_colored_texture", "size,color,textureformat", "I}:3F}:4I?", "R:texture",
    graphics.cpp:1148:          nfr("gl_texture_size", "tex", "R:texture", "I}:2",
    graphics.cpp:1156:          nfr("gl_read_texture", "tex", "R:texture", "S?",
    graphics.cpp:1170:          nfr("gl_generate_texture_mipmap", "tex", "R:texture?", "",
    graphics.cpp:1179:          nfr("gl_set_texture_flags", "tex,tf", "R:textureI", "",
    graphics.cpp:1187:          nfr("gl_switch_to_framebuffer", "tex,hasdepth,multisampleformat,resolvetex,depthtex",
    graphics.cpp:1205:          nfr("gl_framebuffer_size", "", "", "I}:2",
    graphics.cpp:1212:          nfr("gl_light", "pos,params", "F}:3F}:2", "",
    graphics.cpp:1224:          nfr("gl_render_tiles", "positions,tilecoords,mapsize", "F}:2]I}:2]I}:2", "",
    graphics.cpp:1258:          nfr("gl_debug_grid", "num,dist,thickness", "I}:3F}:3F", "",
    graphics.cpp:1294:          nfr("gl_screenshot", "filename", "S", "B",
    graphics.cpp:1301:          nfr("gl_dropped_file", "", "", "S",
    graphics.cpp:1307:          nfr("gl_create_time_query", "", "", "R:timequery",
    graphics.cpp:1314:          nfr("gl_start_time_query", "tq", "R:timequery?", "",
    graphics.cpp:1323:          nfr("gl_stop_time_query", "tq", "R:timequery?", "F",

    imbind.cpp:590:             nfr("im_init", "dark_style,flags,rounding", "B?I?F?", "",
    imbind.cpp:619:             nfr("im_add_font", "font_path,size", "SF", "B",
    imbind.cpp:626:             nfr("im_frame_start", "", "", "",
    imbind.cpp:638:             nfr("im_frame_end", "", "", "",
    imbind.cpp:652:             nfr("im_dockspace_over_viewport", "", "", "",
    imbind.cpp:660:             nfr("im_window_demo", "", "", "B",
    imbind.cpp:669:             nfr("im_window_start", "title,flags,dock", "SII", "",
    imbind.cpp:689:             nfr("im_window_end", "", "", "",
    imbind.cpp:696:             nfr("im_next_window_size", "size", "F}:2", "",
    imbind.cpp:704:             nfr("im_next_window_pos", "pos,pivot", "F}:2F}:2", "",
    imbind.cpp:713:             nfr("im_button", "label", "S", "B",
    imbind.cpp:722:             nfr("im_selectable", "label,selected", "SB?", "B",
    imbind.cpp:732:             nfr("im_same_line", "", "", "", "",
    imbind.cpp:739:             nfr("im_new_line", "", "", "", "",
    imbind.cpp:745:             nfr("im_separator", "", "", "",
    imbind.cpp:753:             nfr("im_get_layout_pos", "", "", "F}:2", "",
    imbind.cpp:760:             nfr("im_set_layout_pos", "pos", "F}:2", "", "",
    imbind.cpp:767:             nfr("im_get_content_region_avail", "", "", "F}:2",
    imbind.cpp:775:             nfr("im_text", "label", "S", "",
    imbind.cpp:784:             nfr("im_text_wrapped", "label", "S", "",
    imbind.cpp:793:             nfr("im_tooltip", "label", "S", "",
    imbind.cpp:802:             nfr("im_checkbox", "label,bool", "SI", "I2",
    imbind.cpp:811:             nfr("im_input_text", "label,str", "SSk", "S",
    imbind.cpp:818:             nfr("im_input_int", "label,val,min,max", "SIII", "I",
    imbind.cpp:829:             nfr("im_input_float", "label,val", "SF", "F",
    imbind.cpp:836:             nfr("im_radio", "labels,active,horiz", "S]II", "I",
    imbind.cpp:851:             nfr("im_combo", "label,labels,active", "SS]I", "I",
    imbind.cpp:867:             nfr("im_listbox", "label,labels,active,height", "SS]II", "I",
    imbind.cpp:883:             nfr("im_sliderint", "label,i,min,max", "SIII", "I",
    imbind.cpp:892:             nfr("im_sliderfloat", "label,f,min,max", "SFFF", "F",
    imbind.cpp:902:             nfr("im_slider" #type #N, "label,"#T #N ",min,max", "S" #T "}:" #N #T #T, #T "}:" #N, "",  \
    imbind.cpp:920:             nfr("im_coloredit", "label,color", "SF}", "A2",
    imbind.cpp:929:             nfr("im_image", "tex,size", "R:textureF}:2", "",
    imbind.cpp:938:             nfr("im_image_button", "label,tex,size,bgcol", "SR:textureF}:2F}:4?", "B",
    imbind.cpp:950:             nfr("im_image_mouseclick", "tex,size", "R:textureF}:2", "F}:2I",
    imbind.cpp:974:             nfr("im_treenode_start", "label,flags", "SI", "B",
    imbind.cpp:985:             nfr("im_treenode_end", "", "", "",
    imbind.cpp:992:             nfr("im_tab_bar_start", "label", "S", "B",
    imbind.cpp:1002:            nfr("im_tab_bar_end", "", "", "",
    imbind.cpp:1009:            nfr("im_tab_start", "label,flags", "SI", "B",
    imbind.cpp:1020:            nfr("im_tab_end", "", "", "",
    imbind.cpp:1027:            nfr("im_menu_bar_start", "main", "B", "B",
    imbind.cpp:1037:            nfr("im_menu_bar_end", "main", "B", "",
    imbind.cpp:1045:            nfr("im_menu_start", "label,disabled", "SB?", "B",
    imbind.cpp:1056:            nfr("im_menu_end", "", "", "",
    imbind.cpp:1063:            nfr("im_menu_item", "label,shortcut,disabled", "SS?B?", "B",
    imbind.cpp:1077:            nfr("im_menu_item_toggle", "label,selected,disabled", "SB?B?", "B",
    imbind.cpp:1088:            nfr("im_id_start", "label", "Ss", "",
    imbind.cpp:1099:            nfr("im_id_end", "", "", "",
    imbind.cpp:1106:            nfr("im_child_start", "title,size,flags", "SF}:2I", "",
    imbind.cpp:1117:            nfr("im_child_end", "", "", "",
    imbind.cpp:1124:            nfr("im_group_start", "", "", "",
    imbind.cpp:1133:            nfr("im_group_end", "", "", "",
    imbind.cpp:1140:            nfr("im_popup_start", "label,winflags,rmbprevitem", "SIB?", "B",
    imbind.cpp:1153:            nfr("im_popup_end", "", "", "",
    imbind.cpp:1160:            nfr("im_popup_open", "label", "S", "",
    imbind.cpp:1168:            nfr("im_close_current_popup", "", "", "",
    imbind.cpp:1175:            nfr("im_disabled_start", "disabled", "B", "",
    imbind.cpp:1183:            nfr("im_disabled_end", "", "", "",
    imbind.cpp:1190:            nfr("im_width_start", "width", "F", "",
    imbind.cpp:1200:            nfr("im_width_end", "", "", "", "",
    imbind.cpp:1206:            nfr("im_edit_anything", "value,label", "AkS?", "A1",
    imbind.cpp:1217:            nfr("im_graph", "label,values,ishistogram", "SF]I", "",
    imbind.cpp:1234:            nfr("im_show_vars", "", "", "",
    imbind.cpp:1242:            nfr("im_show_engine_stats", "", "", "",
    imbind.cpp:1250:            nfr("breakpoint", "condition", "I", "",
    imbind.cpp:1261:            nfr("breakpoint", "", "", "",

    lobsterreader.cpp:429:      nfr("parse_data", "typeid,stringdata", "TS", "A1?S?",
    lobsterreader.cpp:442:      nfr("flexbuffers_value_to_binary", "val,max_nesting,cycle_detection", "AI?B?", "S",
    lobsterreader.cpp:464:      nfr("flexbuffers_binary_to_value", "typeid,flex", "TS", "A1?S?",
    lobsterreader.cpp:479:      nfr("flexbuffers_binary_to_json", "flex,field_quotes", "SB?", "S?S?",
    lobsterreader.cpp:498:      nfr("flexbuffers_json_to_binary", "json", "S", "SS?",

    meshgen.cpp:675:            nfr("mg_sphere", "radius", "F", "",
    meshgen.cpp:683:            nfr("mg_cube", "extents", "F}:3", "",
    meshgen.cpp:691:            nfr("mg_cylinder", "radius,height", "FF", "",
    meshgen.cpp:700:            nfr("mg_tapered_cylinder", "bot,top,height", "FFF", "",
    meshgen.cpp:710:            nfr("mg_superquadric", "exponents,scale", "F}:3F}:3", "",
    meshgen.cpp:720:            nfr("mg_superquadric_non_uniform", "posexponents,negexponents,posscale,negscale", "F}:3F}:3F}:3F}:3", "",
    meshgen.cpp:732:            nfr("mg_supertoroid", "R,exponents", "FF}:3", "",
    meshgen.cpp:741:            nfr("mg_landscape", "zscale,xyscale", "FF", "",
    meshgen.cpp:750:            nfr("mg_set_polygon_reduction", "polyreductionpasses,epsilon,maxtricornerdot", "IFF", "",
    meshgen.cpp:764:            nfr("mg_set_color_noise", "noiseintensity,noisestretch", "FF", "",
    meshgen.cpp:773:            nfr("mg_set_vertex_randomize", "factor", "F", "",
    meshgen.cpp:782:            nfr("mg_set_point_mode", "on", "B", "",
    meshgen.cpp:789:            nfr("mg_polygonize", "subdiv", "I", "R:mesh",
    meshgen.cpp:798:            nfr("mg_convert_to_cubes", "subdiv,zoffset", "II", "R:voxels",
    meshgen.cpp:806:            nfr("mg_translate", "vec", "F}:3", "",
    meshgen.cpp:814:            nfr("mg_scale", "f", "F", "",
    meshgen.cpp:821:            nfr("mg_scale_vec", "vec", "F}:3", "",
    meshgen.cpp:828:            nfr("mg_rotate", "axis,angle", "F}:3F", "",
    meshgen.cpp:836:            nfr("mg_color", "color", "F}:4", "",
    meshgen.cpp:844:            nfr("mg_smooth", "smooth", "F", "",
    meshgen.cpp:852:            nfr("mg_push_transform", "", "", "",
    meshgen.cpp:858:            nfr("mg_pop_transform", "", "", "",

    physics.cpp:145:            nfr("ph_initialize", "gravityvector", "F}:2", "",
    physics.cpp:151:            nfr("ph_create_box", "position,size,offset,rotation,attachto", "F}:2F}:2F}:2?F?R:fixture?", "R:fixture",
    physics.cpp:168:            nfr("ph_create_circle", "position,radius,offset,attachto", "F}:2FF}:2?R:fixture?", "R:fixture",
    physics.cpp:184:            nfr("ph_create_polygon", "position,vertices,attachto", "F}:2F}:2]R:fixture?", "R:fixture",
    physics.cpp:204:            nfr("ph_dynamic", "shape,on", "R:fixtureB", "",
    physics.cpp:214:            nfr("ph_set_linear_velocity", "id,velocity", "R:fixtureF}:2", "",
    physics.cpp:225:            nfr("ph_apply_linear_impulse_to_center", "id,impulse", "R:fixtureF}:2", "",
    physics.cpp:235:            nfr("ph_set_color", "id,color", "R:fixture?F}:4", "",
    physics.cpp:244:            nfr("ph_set_shader", "id,shadername", "R:fixture?S", "",
    physics.cpp:253:            nfr("ph_set_texture", "id,tex,texunit", "R:fixture?R:textureI?", "",
    physics.cpp:263:            nfr("ph_get_position", "id", "R:fixture", "F}:2",
    physics.cpp:270:            nfr("ph_get_mass", "id", "R:fixture", "F",
    physics.cpp:277:            nfr("ph_create_particle", "position,velocity,color,flags", "F}:2F}:2F}:4I?", "I",
    physics.cpp:290:            nfr("ph_create_particle_circle", "position,radius,color,flags", "F}:2FF}:4I?", "",
    physics.cpp:305:            nfr("ph_initialize_particles", "radius", "F", "",
    physics.cpp:312:            nfr("ph_step", "seconds,viter,piter", "FII", "",
    physics.cpp:337:            nfr("ph_particle_contacts", "id", "R:fixture", "I]",
    physics.cpp:350:            nfr("ph_raycast", "p1,p2,n", "F}:2F}:2I", "I]",
    physics.cpp:377:            nfr("ph_delete_particle", "i", "I", "",
    physics.cpp:386:            nfr("ph_getparticle_position", "i", "I", "F}:2",
    physics.cpp:394:            nfr("ph_render", "", "", "",
    physics.cpp:437:            nfr("ph_render_particles", "scale", "F", "",

    simplex.cpp:410:            nfr("simplex", "pos,octaves,scale,persistence", "F}IFF", "F",
    simplex.cpp:427:            nfr("simplex_raw", "pos", "F}", "F",

    steamworks.cpp:145:         nfr("steam_init", "appid,allowscreenshots", "IB", "I",
    steamworks.cpp:156:         nfr("steam_overlay", "", "", "B",
    steamworks.cpp:162:         nfr("steam_username", "", "", "S",
    steamworks.cpp:168:         nfr("steam_unlock_achievement", "achievementname", "S", "B",
    steamworks.cpp:177:         nfr("steam_write_file", "file,contents", "SS", "B",
    steamworks.cpp:190:         nfr("steam_read_file", "file", "S", "S?",


VECSLIDER
    imbind.cpp:912:             VECSLIDER(Int, int, intval, I, 2);
    imbind.cpp:913:             VECSLIDER(Int, int, intval, I, 3);
    imbind.cpp:914:             VECSLIDER(Int, int, intval, I, 4);
    imbind.cpp:915:             VECSLIDER(Float, float, fltval, F, 2);
    imbind.cpp:916:             VECSLIDER(Float, float, fltval, F, 3);
    imbind.cpp:917:             VECSLIDER(Float, float, fltval, F, 4);


READFOP
    file.cpp:349:               READFOP(flatbuffers_field_int64, int64_t, read_field_desc1, "I")
    file.cpp:350:               READFOP(flatbuffers_field_int32, int32_t, read_field_desc2, "I")
    file.cpp:351:               READFOP(flatbuffers_field_int16, int16_t, read_field_desc2, "I")
    file.cpp:352:               READFOP(flatbuffers_field_int8, int8_t, read_field_desc2, "I")
    file.cpp:353:               READFOP(flatbuffers_field_uint64, uint64_t, read_field_desc1, "I")
    file.cpp:354:               READFOP(flatbuffers_field_uint32, uint32_t, read_field_desc2, "I")
    file.cpp:355:               READFOP(flatbuffers_field_uint16, uint16_t, read_field_desc2, "I")
    file.cpp:356:               READFOP(flatbuffers_field_uint8, uint8_t, read_field_desc2, "I")
    file.cpp:357:               READFOP(flatbuffers_field_float64, double, read_field_desc2, "F")
    file.cpp:358:               READFOP(flatbuffers_field_float32, float, read_field_desc2, "F")


READOP
    file.cpp:317:               READOP(read_int64_le, int64_t, false, read_val_desc1, "I")
    file.cpp:318:               READOP(read_int32_le, int32_t, false, read_val_desc2, "I")
    file.cpp:319:               READOP(read_int16_le, int16_t, false, read_val_desc2, "I")
    file.cpp:320:               READOP(read_int8_le, int8_t, false, read_val_desc2, "I")
    file.cpp:321:               READOP(read_uint64_le, uint64_t, false, read_val_desc1, "I")
    file.cpp:322:               READOP(read_uint32_le, uint32_t, false, read_val_desc2, "I")
    file.cpp:323:               READOP(read_uint16_le, uint16_t, false, read_val_desc2, "I")
    file.cpp:324:               READOP(read_uint8_le, uint8_t, false, read_val_desc2, "I")
    file.cpp:325:               READOP(read_float64_le, double, false, read_val_desc2, "F")
    file.cpp:326:               READOP(read_float32_le, float, false, read_val_desc2, "F")
    file.cpp:327:               READOP(read_int64_le_back, int64_t, true, read_val_desc2, "I")
    file.cpp:328:               READOP(read_int32_le_back, int32_t, true, read_val_desc2, "I")
    file.cpp:329:               READOP(read_int16_le_back, int16_t, true, read_val_desc2, "I")
    file.cpp:330:               READOP(read_int8_le_back, int8_t, true, read_val_desc2, "I")
    file.cpp:331:               READOP(read_uint64_le_back, uint64_t, true, read_val_desc2, "I")
    file.cpp:332:               READOP(read_uint32_le_back, uint32_t, true, read_val_desc2, "I")
    file.cpp:333:               READOP(read_uint16_le_back, uint16_t, true, read_val_desc2, "I")
    file.cpp:334:               READOP(read_uint8_le_back, uint8_t, true, read_val_desc2, "I")
    file.cpp:335:               READOP(read_float64_le_back, double, true, read_val_desc2, "F")
    file.cpp:336:               READOP(read_float32_le_back, float, true, read_val_desc2, "F")


WRITEOP
    file.cpp:268:               WRITEOP(write_int64_le, int64_t, false, write_val_desc1, "I")
    file.cpp:269:               WRITEOP(write_int32_le, int32_t, false, write_val_desc2, "I")
    file.cpp:270:               WRITEOP(write_int16_le, int16_t, false, write_val_desc2, "I")
    file.cpp:271:               WRITEOP(write_int8_le, int8_t, false, write_val_desc2, "I")
    file.cpp:272:               WRITEOP(write_float64_le, double, false, write_val_desc2, "F")
    file.cpp:273:               WRITEOP(write_float32_le, float, false, write_val_desc2, "F")
    file.cpp:274:               WRITEOP(write_int64_le_back, int64_t, true, write_val_desc2, "I")
    file.cpp:275:               WRITEOP(write_int32_le_back, int32_t, true, write_val_desc2, "I")
    file.cpp:276:               WRITEOP(write_int16_le_back, int16_t, true, write_val_desc2, "I")
    file.cpp:277:               WRITEOP(write_int8_le_back, int8_t, true, write_val_desc2, "I")
    file.cpp:278:               WRITEOP(write_float64_le_back, double, true, write_val_desc2, "F")
    file.cpp:279:               WRITEOP(write_float32_le_back, float, true, write_val_desc2, "F")

